apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.tmt.tmtmachinetest"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "TmtMachineTest"

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        stagging {
            buildConfigField "String", "APP_FLAVOR", '"stagging"'
        }

        production {
            buildConfigField "String", "APP_FLAVOR", '"production"'
        }
    }

    lintOptions {
        abortOnError true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/ASL2.0'
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion rootProject.ext.appCompat
                }
            }
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:$rootProject.ext.appCompat"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.ext.constraint"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation "junit:junit:$rootProject.ext.junit"
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.runner"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.ext.espresso"

    implementation "com.android.support:recyclerview-v7:$rootProject.ext.appCompat"
    implementation "com.android.support:design:$rootProject.ext.appCompat"

    //    leakcanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.ext.leakcanary"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.ext.leakcanary"

    //    Tiny Dancer
    debugImplementation "com.github.brianPlummer:tinydancer:$rootProject.ext.tinydancer"
    releaseImplementation "com.github.brianPlummer:tinydancer-noop:$rootProject.ext.tinydancer"
    testImplementation "com.github.brianPlummer:tinydancer-noop:$rootProject.ext.tinydancer"

    //    Timber
    implementation "com.jakewharton.timber:timber:$rootProject.ext.timber"
}
